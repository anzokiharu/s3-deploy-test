---
import { Utils } from '@/utils/utils';
interface Props {
  class?: string;
  id?: string;
  transition?: string;
}

const { class: className, id, transition, ...props } = Astro.props;
const uuid = Utils.getUuid();
const accordionTransition = transition || 'all 0.3s ease';
---

<div id={id} class:list={['sp-accordion', className]} {...props}>
  <button
    class="sp-accordion__trigger js-accordionTrigger"
    aria-expanded="false"
    aria-controls={uuid}
    data-state="false"
    type="button"
    {...props}
  >
    <slot name="top" />
  </button>
  <div id={uuid} class="sp-accordion__panel is-hidden" role="region" aria-labelledby={id} {...props}>
    <div class="sp-accordion__panelInner" {...props}>
      <slot name="body" />
    </div>
  </div>
</div>
<style lang="scss" define:vars={{ transition: accordionTransition }}>
  .sp-accordion__trigger {
    width: 100%;
  }

  .sp-accordion__panel {
    width: 100%;
    height: auto;
    display: grid;
    grid-template-rows: 1fr;
    transition: var(--transition);

    &.is-hidden {
      @include utils.mq-down {
        grid-template-rows: 0fr;
        transition: var(--transition);
      }
    }
  }

  .sp-accordion__panelInner {
    overflow: hidden;
  }
</style>
<script>
  import { Conf } from '@/assets/scripts/core/conf';
  const accordions = document.querySelectorAll('.sp-accordion .js-accordionTrigger');
  const mediaQuery = window.matchMedia(`(max-width: ${Conf.MQ_DOWN.md}px)`);
  const accordionInstances: accordionClass[] = [];

  class accordionClass {
    el: HTMLElement;
    HIDDEN_CLASS: string;
    controls: string;
    panel: HTMLElement | null;

    constructor(el: HTMLElement) {
      this.el = el;
      this.HIDDEN_CLASS = 'is-hidden';
      this.controls = this.el.getAttribute('aria-controls') as string;
      this.panel = document.getElementById(this.controls);

      if (!mediaQuery.matches) {
        this.el.setAttribute('aria-expanded', 'true');
      }

      this.el.addEventListener('click', this._toggleAccordion.bind(this));
      this.el.addEventListener('keydown', this._handleKeydown.bind(this)); // キーボード対応
    }

    updateAccordionState() {
      const state = this.el.getAttribute('data-state');
      if (state) {
        if (mediaQuery.matches) {
          this.el.setAttribute('aria-expanded', state);
          if (state === 'true') {
            this.panel?.classList.remove(this.HIDDEN_CLASS);
          } else {
            this.panel?.classList.add(this.HIDDEN_CLASS);
          }
        } else {
          this.el.setAttribute('aria-expanded', 'true');
          this.panel?.classList.remove(this.HIDDEN_CLASS);
        }
      }
    }

    _toggleAccordion() {
      if (mediaQuery.matches) {
        const isOpen = this.el.getAttribute('aria-expanded') === 'true';
        if (isOpen) {
          this.el.setAttribute('aria-expanded', 'false');
          this.el.setAttribute('data-state', 'false');
          this.panel?.classList.add(this.HIDDEN_CLASS);
        } else {
          this.el.setAttribute('aria-expanded', 'true');
          this.el.setAttribute('data-state', 'true');
          this.panel?.classList.remove(this.HIDDEN_CLASS);
        }
      }
    }

    _handleKeydown(event: KeyboardEvent) {
      if (event.key === 'Enter' || event.key === ' ') {
        event.preventDefault();
        this._toggleAccordion();
      }
    }
  }
  accordions.forEach((accordion) => {
    const accordionInstance = new accordionClass(accordion as HTMLElement);
    accordionInstances.push(accordionInstance); // インスタンスを配列に保持
  });
  const handleResize = () => {
    accordionInstances.forEach((instance) => {
      instance.updateAccordionState();
    });
  };
  window.addEventListener('resize', handleResize);
  handleResize();
</script>
